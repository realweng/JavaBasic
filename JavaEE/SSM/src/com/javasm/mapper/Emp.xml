<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--当Mybatis通过getMapper来查找接口实现时,会根据类的全名来Mybatis上下文中的Mapper中查找对应的namespace.
根据对应的类被调用的方法名来获取id是否存在.-->
<mapper namespace="com.javasm.dao.EmpDao">
    <!--结果集映射,可以很方便的将SQL查询的字段名与实体类的属性关联
           id: 当前结果集的唯一标志.当前xml中唯一 [主键]
           type : 当前结果集对应的实体类
       -->
    <resultMap id="empMap" type="Emp">
        <!--    id[主键]    -->
        <id property="empId" column="empId"></id>
        <!--property:实体属性名称   column:表列名    -->
        <result property="empName" column="empName"></result>
        <result property="empPwd" column="empPwd"></result>
        <result property="empSex" column="empSex"></result>
        <result property="enterTime" column="enterTime"></result>
        <result property="depId" column="depId"></result>
    </resultMap>

    <!-- extends : 继承指定的map中的所有的映射结果集-->
    <resultMap id="emp_dep_map" type="Emp" extends="empMap">
        <!--association:描述当前结果集中的外部对象
            property:当前结果集映射实体类中外部对象成员属性
            javaType:外部成员属性对应的类型
                -->
        <association property="dep" javaType="com.javasm.entity.Dep" resultMap="com.javasm.dao.DepDao.depMap">
        </association>
    </resultMap>

    <!-- 懒加载 -->
    <resultMap id="emp_lazy" type="Emp" extends="empMap">
        <!--association:描述当前结果集中的外部对象
            property:当前结果集映射实体类中外部对象成员属性
            javaType:外部成员属性对应的类型
                -->
        <association property="dep" javaType="com.javasm.entity.Dep" column="depId"
                     select="com.javasm.dao.DepDao.getDep">
            <!--            <id column="depId" property="depId"></id>-->
            <!--            <result column="depName" property="depName"></result>-->
        </association>
    </resultMap>

    <!--  查询结果列名 -->
    <sql id="emp_column">
        e
        .
        empId
        ,e.empName,e.empPwd,e.empSex,e.enterTime,e.depId
    </sql>

    <sql id="emp_dep_column">
        e
        .
        empId
        ,e.empName,e.empPwd,e.empSex,e.enterTime,d.depId,d.depName
    </sql>

    <select id="getEmp" resultMap="empMap">
        select <include refid="emp_column"></include> from emp e where e.empId = #{empId}
    </select>

    <select id="getEmpDep" resultMap="emp_dep_map">
        SELECT <include refid="emp_dep_column"></include>  FROM emp e,dep d WHERE e.depId = d.depId AND e.empId = 101
    </select>

    <select id="findEmp" resultMap="empMap">
        select <include refid="emp_column"></include> from emp e
        <!--多条件查询的拼接问题-->
        <!-- where的功能：去掉紧跟着的第一个and-->
        <where>
            <if test="empId != null">
                and empId = #{empId}
            </if>
            <if test="empName !=null and empName !=''">
                and empName = #{empName}
            </if>
        </where>
    </select>

    <update id="updateEmp">
        <!--set的功能 会将最后结尾的一个逗号去除-->
        update emp
        <set>
            <if test="empName != null and empName!=''">
                empName = #{empName},
            </if>
            <if test="empPwd !=null and empPwd !=''">
                empPwd = #{empPwd},
            </if>
            <if test="empSex !=null and empSex !=''">
                empSex = #{empSex},
            </if>
        </set>
        -- 根据主键更改数据
        where empId = #{empId}
    </update>

    <!--
       collection : list 和 array
       item : list或者array中元素的变量名称,作用域foreach标签内
       index : 索引下标
       open : 开始循环时追加
       end : 结束循环时追加
       separator : 元素循环追加
     -->
    <select id="findEmpByIds" resultMap="empMap">
        select <include refid="emp_column"></include> from emp e where e.empId in
        <foreach collection="list" item="id" index="index" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <!-- 类 switch case 结构-->
    <select id="findEmpByAny" resultMap="empMap">
        select <include refid="emp_column"></include> from emp e where
        <choose>
            <when test="empName!=null and empName!=''">
                e.empName like CONCAT('%','${empName}','%')
            </when>
            <when test="empSex != null and empSex != ''">
                e.empSex = #{empSex}
            </when>
            <when test="depId != null and depId != ''">
                e.depId = #{depId}
            </when>
            <otherwise>
                empId = #{empId}
            </otherwise>
        </choose>
    </select>
</mapper>